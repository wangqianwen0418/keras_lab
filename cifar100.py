from __future__ import print_function
import keras
from keras.datasets import cifar100
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D

import os
import pickle
import numpy as np

batch_size = 32
num_classes = 100
epochs = 200
num_predictions = 20
save_dir = os.path.join(os.getcwd(), 'saved_models')
tf_dir = os.path.join(save_dir, 'tf_logs')
if not os.path.isdir(save_dir):
    os.makedirs(save_dir)

accuracy=0

# The data, shuffled and split between train and test sets:
(x_train, y_train), (x_test, y_test) = cifar100.load_data()
print('x_train shape:', x_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# Convert class vectors to binary class matrices.
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

model = Sequential()

model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=x_train.shape[1:],
                 name='block1_conv1',
                 activation='relu'))
model.add(Conv2D(32, (3, 3), name='block1_conv2',activation="relu"))
model.add(MaxPooling2D(pool_size=(2, 2),name='block1_pool'))
model.add(Dropout(0.25,name='block1_drop'))

model.add(Conv2D(64, (3, 3), name='block2_conv1',padding='same',activation='relu'))
model.add(Conv2D(64, (3, 3), name='block2_conv2',activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2),name='block2_pool'))
model.add(Dropout(0.25,name='block2_drop'))

model.add(Conv2D(128, (3, 3), name='block3_conv1',activation='relu', padding='same'))
model.add(Conv2D(128, (3, 3), name='block3_conv2',activation='relu', padding='same'))
model.add(MaxPooling2D((2, 2),,name='block3_pool'))
model.add(Dropout(0.25,name='block3_drop'))

model.add(Flatten(name='flatten'))
model.add(Dense(512,activation='relu',name='dense_1'))
model.add(Dropout(0.5,name='drop'))
model.add(Dense(num_classes,activation='softmax',name='dense_2'))

opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)
model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

datagen = ImageDataGenerator(
    featurewise_center=False,  # set input mean to 0 over the dataset
    samplewise_center=False,  # set each sample mean to 0
    featurewise_std_normalization=False,  # divide inputs by std of the dataset
    samplewise_std_normalization=False,  # divide each input by its std
    zca_whitening=False,  # apply ZCA whitening
    rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
    width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
    height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
    horizontal_flip=True,  # randomly flip images
    vertical_flip=False)  # randomly flip images

# Compute quantities required for feature-wise normalization
# (std, mean, and principal components if ZCA whitening is applied).
datagen.fit(x_train)

tf_cb = keras.callbacks.TensorBoard(
    log_dir = tf_dir, 
    histogram_freq=1, 
    batch_size=32, 
    write_graph=True, 
    write_grads=True, 
    write_images=True, 
    embeddings_freq=1, 
    embeddings_layer_names=[], 
    embeddings_metadata=None)

class SaveModel(keras.callbacks.Callback):
    def on_train_begin(self):
        print(self.params)
        print(self.model)
    def on_batch_end(self, batch, logs={}):
        global accuracy
        global save_dir
        acc_batch = logs['acc']
        model_name = 'model_acc_{}_batch_{}'.format(acc_batch, batch)
        model_path = os.path.join(save_dir, model_name)
        if(acc_batch>accuracy):
            self.model.save_weights(model_path)
            accuracy+=0.05
        if (acc_batch>0.9):
            self.model.stop_training=True
            print('batch {}, acc {}: early stopping'.format(batch, logs['acc']))
        
save_model = SaveModel()
# Fit the model on the batches generated by datagen.flow().
model.fit_generator(datagen.flow(x_train, y_train,
                                    batch_size=batch_size),
                    steps_per_epoch=x_train.shape[0] // batch_size,
                    epochs=epochs,
                    validation_data=(x_test, y_test),
                    callbacks=[tf_cb, save_model])
